/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    $("#error").hide();
    $("#protocol").val(widget.preferenceForKey(widget.identifier + "protocol"));
    $("#url").val(widget.preferenceForKey(widget.identifier + "url"));
    $("#token").val(widget.preferenceForKey(widget.identifier + "token"));
    
    loadUsers();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    savePreferences();
    
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function imDoingThis(event) {
  if (event.keyCode == 13) {
    sendToBackpack('PUT', '/users/' + $("#user_id").val() + '/status.xml', "<status><message>" + $("#im_doing_this").val() + "</message></status>");
    $("#im_doing_this").select();
  }
}

function iDidThis(event) {
  if (event.keyCode == 13) {
    sendToBackpack('POST', '/users/' + $("#user_id").val() + '/journal_entries.xml', "<journal-entry><body>" + $("#i_did_this").val() + "</body></journal-entry>");
    $("#i_did_this").select();
  }
}

function sendToBackpackHandler() {
  if(this.readyState == 4) {
    if(this.status == 200 || this.status == 201) {
      $("#error").hide();
      $("#status").css('background-color', 'yellow');
      $("#status").animate({backgroundColor:'#ECF3FE'});
    } else {
      alert("Status was " + this.status);
      showError();
      showBack(null);
    }
  }
}

function sendToBackpack(method, path, data) {
  var client = new XMLHttpRequest();
  client.open(method, backpackURL() + path + "?token=" + $("#token").val());
  client.setRequestHeader("Content-Type", "text/xml;charset=UTF-8");
  client.onreadystatechange = sendToBackpackHandler;
  client.send(data);
}


function loadUsersIfEnter(event) {
  if (event.keyCode == 13 || $("#token").val().length >= 40) {
    loadUsers(event);
  }
}

function loadUsers(event)
{  
  var user_select = $("#user_id");
  user_select.empty();
  $.get(backpackURL() + $("#token").val() + "/users.xml", function (data) {
    if ($(data).find("user").length == 0) {
      alert(backpackURL() + $("#token").val() + "/users.xml");
      showError();
    }
    else {
      $("#error").hide();
      select_index = 0;
      index = 0;
      $(data).find("user").each(function() {
        user_select.addOption($(this).find('id').text(), $(this).find('name').text());
        if (widget.preferenceForKey(widget.identifier + 'user_id') == $(this).find('id').text()) {
          select_index = index;
        }
        index++;
      })
      user_select[0].selectedIndex = select_index;
      user_select.attr('disabled', false);
    }
  });
}

function backpackURL() {
  return $('#protocol').val() + $('#url').val() + ".backpackit.com/"
}

function showError() {
  $("#error").show();
  var orig_color = $("#error").css('background-color');
  $("#error").css('background-color', 'yellow');
  $("#error").animate({backgroundColor:'red'}, 500);
}

function savePreferences() {
  widget.setPreferenceForKey($("#token").val(), widget.identifier + "token");
  widget.setPreferenceForKey($("#url").val(), widget.identifier + "url");
  widget.setPreferenceForKey($("#protocol").val(), widget.identifier + "protocol");
  widget.setPreferenceForKey($("#user_id").val(), widget.identifier + "user_id");
}